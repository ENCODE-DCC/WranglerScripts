#!/bin/bash
# dbgap_transferer 0.0.1
# Generated by dx-app-wizard.
#
# Basic execution pattern: Your app will run on a single machine from
# beginning to end.
#
# Your job's input variables (if any) will be loaded as environment
# variables before this script runs.  Any array inputs will be loaded
# as bash arrays.
#
# Any code outside of main() (or any entry point you may add) is
# ALWAYS executed, followed by running the entry point itself.
#
# See https://wiki.dnanexus.com/Developer-Portal for tutorials on how
# to modify this file.
set -x -e
main() {

    #BAM=false
    #FQ=true

    echo "Value of SRR: '$SRR'"
    echo "Value of ngc_key: '$ngc_key'"
    echo "Value of mkfg: '$mkfg'"
    echo "Value of BAM: '$BAM'"
    echo "Value of FQ: '$FQ'"
   
    root=""

    # The following line(s) use the dx command-line tool to download your file
    # inputs to the local file system using variable names for the filenames. To
    # recover the original filenames, you can use the output of "dx describe
    # "$variable" --name".

    # download encryption key
    dx download "$ngc_key" -o ngc_key
    #import the key.  creates ./.ncbi and ./ncbi and writes .ncbi/user-config.mkfg
    #the folder_name variable stores where the rest of the script expects the SRA files
    #to be saved to.  So if an SRR is given for a different key, or public, then the
    #script will fail later since those files will automatically go to the appropriate
    #direcory for their SRR (for their key or public).
    folder_name=`$root/sra/bin/vdb-config --import ngc_key | tail -n 1 | python $root/getRepository.py`
    
    cd ncbi

    #modify config file to include public path        	
    dx download "$mkfg" -o user-settings.mkfg
    cat user-settings.mkfg ../.ncbi/user-settings.mkfg > temp.mkfg
    echo "/repository/user/main/public/root = \""`pwd`"/public\"" >> temp.mkfg
    mv temp.mkfg ../.ncbi/user-settings.mkfg 
    
    #create public directory and download refseq files for decompression
    mkdir public
    #cd to the directory associated with the ngc_key
    #note that this means that the SRR fed to the applet must resolve to this
    #directory.  So public SRR's will throw an error later because they will
    #be downloaded to the public folder
    cd /home/dnanexus/ncbi/$folder_name
    
    #get number of spots from SRA
    declare -i spot_count_SRA
    declare -i spot_count_local
	
    spot_count_SRA=$($root/sra/bin/sra-stat -x --quick "$SRR" | perl -ne 'if($_=~/Run accession.+spot_count=\"(\d+)/){print "$1\n"}')
    echo "SRA Spots COUNT = $spot_count_SRA"

    $root/sra/bin/prefetch -c "$SRR"
    $root/sra/bin/vdb-validate -v "./sra/$SRR.sra"
    
    spot_count_local=$($root/sra/bin/sra-stat -x --quick "./sra/$SRR.sra" | perl -ne 'if($_=~/Run accession.+spot_count=\"(\d+)/){print "$1\n"}')
    echo "Local SRA Spots COUNT = $spot_count_local"
	
    if [ $spot_count_SRA -ne $spot_count_local ]; then
	echo "Local and SRA Counts Do Not Match"
	exit 1
    fi
    mkdir -p /home/dnanexus/out/fastq
    # converting to sam/bam
    $root/sra/bin/fastq-dump --outdir /home/dnanexus/out/fastq $option /home/dnanexus/ncbi/$folder_name/sra/$SRR.sra

    # uploading
    dx-upload-all-outputs --parallel
}
