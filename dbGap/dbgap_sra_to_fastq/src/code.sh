#!/bin/bash
# dbgap_transferer 0.0.1
# Generated by dx-app-wizard.
#
# Modified from code provided to the ENCODE DCC by Alpha Diallo, DNAnexus

set -x -e
main() {

    #BAM=false
    #FQ=true

    echo "Value of SRR: '$SRR'"
    echo "Value of ngc_key: '$ngc_key'"
    # mkfg could be a empty file if all the necessary config parameters are 
    # extracted from the ngc_key file.
    echo "Value of mkfg: '$mkfg'"
    echo "Value of BAM: '$BAM'"
    echo "Value of FQ: '$FQ'"
   
    root=""

    # Download the encryption key.
    dx download "$ngc_key" -o ngc_key
    # Import the key.  vdb0-config reates ./.ncbi and ./ncbi and writes .ncbi/user-config.mkfg.
    # The folder_name variable stores where the rest of the script expects the SRA files
    # to be saved to.  So if an SRR is given for a different key, or public, then the
    # script will fail later since those files will automatically go to the appropriate
    # direcory for their SRR (for their key or public).
    folder_name=`$root/sra/bin/vdb-config --import ngc_key | tail -n 1 | python $root/getRepository.py`
    
    cd ncbi

    # Modify the config file to include public path.
    dx download "$mkfg" -o user-settings.mkfg
    cat user-settings.mkfg ../.ncbi/user-settings.mkfg > temp.mkfg
    echo "/repository/user/main/public/root = \""`pwd`"/public\"" >> temp.mkfg
    mv temp.mkfg ../.ncbi/user-settings.mkfg 
    
    # Create a public directory and download refseq files for decompression.
    mkdir public
    # cd to the directory associated with the ngc_key.
    # Note that this means that the SRR fed to the applet must resolve to this
    # directory.  Public SRR's will throw an error later because they will
    # be downloaded to the public folder.
    cd /home/dnanexus/ncbi/$folder_name
    
    # Get the number of spots from SRA.
    declare -i spot_count_SRA
    declare -i spot_count_local
	
    spot_count_SRA=$($root/sra/bin/sra-stat -x --quick "$SRR" | perl -ne 'if($_=~/Run accession.+spot_count=\"(\d+)/){print "$1\n"}')
    echo "SRA Spots COUNT = $spot_count_SRA"

    $root/sra/bin/prefetch --max-size 40000000 -c "$SRR"
    $root/sra/bin/vdb-validate -v "./sra/$SRR.sra"
    
    spot_count_local=$($root/sra/bin/sra-stat -x --quick "./sra/$SRR.sra" | perl -ne 'if($_=~/Run accession.+spot_count=\"(\d+)/){print "$1\n"}')
    echo "Local SRA Spots COUNT = $spot_count_local"
	
    if [ $spot_count_SRA -ne $spot_count_local ]; then
	echo "Local and SRA Counts Do Not Match"
	exit 1
    fi

    sra_md5=$(md5sum "./sra/$SRR.sra" | cut -f1 -d' ')
    dx-jobutil-add-output sra_md5 $sra_md5

    declare -i sra_size
    sra_size=$(wc -c "./sra/$SRR.sra" | awk '{print $1}')
    dx-jobutil-add-output sra_size $sra_size

    outdir="/home/dnanexus/out/fastq"
    mkdir -p $outdir
    # Convert to fastq
    $root/sra/bin/fastq-dump --outdir $outdir $option /home/dnanexus/ncbi/$folder_name/sra/$SRR.sra

    # Iterate over all the fastqs created and calculate 
    declare -a fastq_filenames
    fastq_filenames=($(ls $outdir))
    declare -a fastq_md5s
    fastq_md5s=($(for a in ${fastq_filenames[@]}; do (cd $outdir && md5sum $a | cut -f1 -d' '); done))
    for a in ${fastq_filenames[@]}; do dx-jobutil-add-output --array fastq_filenames $a; done 
    for a in ${fastq_md5s[@]}; do dx-jobutil-add-output --array fastq_md5s $a; done

    # uploading
    dx-upload-all-outputs --parallel
}
